buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}

apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.bmuschko.cargo'



configurations {

    ui {}

    modules {}
    plugins {}


    war {}

    wildfly

    libraries {
        transitive = false
    }

    transitiveLibraries {
        transitive = true
    }
}



dependencies {

    compileOnly 'javax.servlet:javax.servlet-api'

    compileOnly group: 'javax', name: 'javaee-api', version: '7.0'
    compileOnly group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
    
    compileOnly 'io.sunshower.kernel:kernel-api'
    testCompile 'io.sunshower.kernel:kernel-api'
    ui project(path: ':ui', configuration: 'web')
    
    compileOnly 'javax.inject:javax.inject'
    testCompileOnly 'javax.inject:javax.inject'
    libraries 'de.neuland-bfi:jade4j:1.2.7'
    libraries 'de.neuland-bfi:spring-jade4j:1.2.7'
    compile 'de.neuland-bfi:spring-jade4j:1.2.7'
    compile 'de.neuland-bfi:jade4j:1.2.7'

    compileOnly 'io.sunshower.kernel:kernel-api:1.0.0-SNAPSHOT'
    compileOnly 'io.sunshower.kernel:kernel-wildfly-provider:1.0.0-SNAPSHOT'

    compileOnly 'org.springframework:spring-webmvc'

    wildfly 'io.sunshower.wildfly:sunshower-wildfly:1.0.0-SNAPSHOT@zip'
    plugins 'io.sunshower.deployment:sunshower-web:1.0.0-SNAPSHOT@war'
    plugins 'io.sunshower.deployment:sunshower-theme:1.0.0-SNAPSHOT@war'
//    plugins 'io.sunshower.atmosphere:sunshower-atmosphere:1.0.0-SNAPSHOT@war'
    plugins 'io.sunshower.kernel:kernel-wildfly-provider:1.0.0-SNAPSHOT@war'

    testCompile 'io.sunshower.test:test-common:1.0.0-SNAPSHOT'

    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testCompile 'org.junit.platform:junit-platform-runner'

    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container'
    testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-managed'

    

}


artifacts {
    war tasks.war
}


task unpackWildfly(type: Copy) {
    dependsOn configurations.wildfly

    from {
        configurations.wildfly.collect { zipTree(it) }
    }
    into "${project.buildDir}/wildfly"
}

task unpackPlugins(type: Copy, dependsOn: 'unpackWildfly') {
    dependsOn configurations.plugins

    from configurations.plugins
    into "$project.buildDir/wildfly/standalone/deployments"
}

war {
    dependsOn configurations.ui
    archiveName = "atmosphere-web-${project.version}.war"
    from {
        configurations.ui.collect { zipTree(it) }
    }
    into "/"
}

//build.dependsOn unpackModules
//build.mustRunAfter unpackModules

test.dependsOn unpackPlugins
test.mustRunAfter unpackPlugins

test.dependsOn unpackWildfly
test.mustRunAfter unpackWildfly

war {
    
    classpath += configurations.libraries
    classpath += configurations.transitiveLibraries
}


publishing {
    repositories {
        maven {
            url mavenRepositoryUrl

            credentials {
                username mavenRepositoryUsername
                password mavenRepositoryPassword
            }
        }
    }

    publications {
        maven(MavenPublication) {
            artifactId = "atmosphere-web"
            from components.web
        }
    }
}

cargo {
    containerId = 'wildfly11x'
    port = 8080
    
    local {
        homeDir = file("$project.buildDir/wildfly")
        timeout = 60000
        jvmArgs = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
        systemProperties {
            property 'sunshower.port', '8080'
            property 'sunshower.home', "${project.projectDir}/src/test/resources"
        }
    }
}


cargoStartLocal.dependsOn assemble
//
//test.dependsOn cargoStartLocal
//test.finalizedBy cargoStopLocal
